"""Связи между таблицами
Один к одному.
Выглядит как разделение таблицы на две части

Человек 1 --------> Паспорт

Паспорт принадлежит конкретному человеку. У человека может быть только один паспорт
_________________________________________________________________________________________________
Один ко многим
Самое популярное соединение
                                Документы
            ___________________> ИНН
Человек 1   ___________________> Паспорт
            ___________________> Снилс

Один человек, много документов
_________________________________________________________________________________________________
Многие ко многим.
Подходит для создания связей между объектами, сли каждый из них может иметь
несколько строк в другой таблице.

Человек 1 <_______________/_> Книга 1
Человек 2 <______________/__> Книга 2
Человек 3 <_____________/___> Книга 3

Например, авторы и книги, у нескольких книг может быть несколько авторов и у авторов может быть несколько книг.
Реализуется связь посредством создания отдельной таблицы с сопоставлением id книги и id авторов
"""

"""
Внешний ключ - столбец в БД, который соответствует первичному ключу в другой таблице.
- Позволяет связать таблицы между собой (Обычно устанавливается в подчиненной таблице)
- Позволяет указать поведение при удалении или изменении строки в главной таблице"""


"""
Настройка внешних ключей в таблицах
   Таблицы - books, author, genres
   При указании ссылки , таблицы на которую указывает ссылка должна быть создана первой
   
   ON DELETE - ДЕЙСТВИЯ ПРИ УДАЛЕНИИ ЗНАЧЕНИЯ В ЗАВИСИМОЙ ТАБЛИЦЕ
   ON UPDATE - ДЕЙСТВИЯ ПРИ ОБНОВЛЕНИИ ЗНАЧЕНИЯ В ЗАВИСИМОЙ ТАБЛИЦЕ
   PRIMARY KEY (book_id, author_id) составной первичный ключ - многие ко многим
"""

import sqlite3

with sqlite3.connect('books_db_2.sqlite') as connection:
    cursor = connection.cursor()

    query = """
        CREATE TABLE genres (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(100) not null
        );
                
        CREATE TABLE books (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(100) not null,
            genre_id INTEGER,
            FOREIGN KEY(genre_id) REFERENCES genres(id) ON DELETE SET NULL ON UPDATE CASCADE
        );
        
        CREATE TABLE author (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(100) not null
        );
        
        CREATE TABLE book_author (
            book_id INTEGER, 
            author_id INTEGER, 
            PRIMARY KEY (book_id, author_id),
            FOREIGN KEY (book_id) REFERENCES books(id),
            FOREIGN KEY (author_id) REFERENCES author(id)
        );


     """

    cursor.execute(query)
